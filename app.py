import pysqlite3
import sys
sys.modules["sqlite3"] = sys.modules.pop("pysqlite3")

import streamlit as st
from main import run_content_creation

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Assistente de Cria√ß√£o de Conte√∫do",
    page_icon="üìù",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Configura√ß√£o da sidebar
st.markdown("""
    <style>
    [data-testid="stSidebar"] {
        min-width: 400px;
        max-width: 600px;
    }
    </style>
    """, unsafe_allow_html=True)

# T√≠tulo da aplica√ß√£o
st.title("üìù Assistente de Cria√ß√£o de Conte√∫do")
st.write("Seu assistente para criar conte√∫do envolvente e estrat√©gico")

# Inicializa o estado da sess√£o
if 'resultado' not in st.session_state:
    st.session_state.resultado = None

# Sidebar com informa√ß√µes
with st.sidebar:
    st.header("üìã Informa√ß√µes do Projeto")
    
    topic = st.text_input(
        "T√≥pico Principal",
        help="Digite o tema principal do conte√∫do que voc√™ deseja criar"
    )
    
    target_audience = st.text_area(
        "P√∫blico-Alvo",
        help="Descreva o perfil do p√∫blico que voc√™ deseja alcan√ßar com este conte√∫do"
    )
    
    content_goals = st.multiselect(
        "Objetivos do Conte√∫do",
        ["Educar", "Entreter", "Converter", "Engajar", "Informar", "Inspirar"],
        help="Selecione os principais objetivos do seu conte√∫do"
    )
    
    platforms = st.multiselect(
        "Plataformas",
        ["Blog", "Instagram", "LinkedIn", "Facebook", "Twitter", "TikTok"],
        help="Selecione as plataformas onde o conte√∫do ser√° publicado"
    )
    
    st.header("üéØ Diretrizes de Conte√∫do")
    tone = st.select_slider(
        "Tom da Comunica√ß√£o",
        options=["Formal", "Profissional", "Neutro", "Casual", "Descontra√≠do"],
        value="Profissional"
    )
    
    additional_instructions = st.text_area(
        "Instru√ß√µes Adicionais",
        help="Adicione quaisquer instru√ß√µes espec√≠ficas ou prefer√™ncias para a cria√ß√£o do conte√∫do"
    )

# Bot√£o de a√ß√£o principal
if st.button("üöÄ Gerar Conte√∫do", key="main_button"):
    if not all([topic, target_audience, content_goals, platforms]):
        st.warning("‚ö†Ô∏è Por favor, preencha todos os campos obrigat√≥rios antes de executar.")
    else:
        with st.spinner("Criando seu conte√∫do... Aguarde, por favor."):
            inputs = {
                "target_audience": target_audience,
                "content_goals": content_goals,
                "platforms": platforms,
                "tone": tone,
                "additional_instructions": additional_instructions
            }
            st.session_state.resultado = run_content_creation(topic=topic, inputs=inputs)

# Lista de nomes das tarefas em ordem
task_names = [
    "Pesquisa de Conte√∫do",
    "Cria√ß√£o do Post",
    "Conte√∫do Visual",
    "Estrat√©gia de Redes Sociais",
    "Revis√£o Final"
]

# Exibe o resultado se existir
if st.session_state.resultado:
    if not st.session_state.resultado.success:
        st.error(st.session_state.resultado.error_message)
    else:
        # Exibe os resultados de cada tarefa separadamente
        for i, task_output in enumerate(st.session_state.resultado.tasks_output):
            task_name = task_names[i]
            st.subheader(f"üìå {task_name}")
            
            # Formata o resultado em markdown com borda s√≥lida
            resultado_formatado = f"""
            <div style="font-family: Roboto, sans-serif; font-size: 16px; line-height: 1.6; border: 2px solid #e0e0e0; padding: 15px; border-radius: 5px; margin-bottom: 20px;">
            {task_output.raw}
            </div>
            """
            st.markdown(resultado_formatado, unsafe_allow_html=True)
            
            # Adiciona um bot√£o para copiar o conte√∫do
            st.code(task_output.raw, language="text", line_numbers=False)
